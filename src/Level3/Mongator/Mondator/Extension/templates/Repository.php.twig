<?php
    protected $mongator;

    public function __construct(\Level3\Level3 $level3, \Mongator\Mongator $mongator)
    {
        parent::__construct($level3);

        $this->mongator = $mongator;
    }

    public function find(\Symfony\Component\HttpFoundation\ParameterBag $attributes, \Symfony\Component\HttpFoundation\ParameterBag $queryParams)
    {
{% if config_class.isEmbedded %}
        $group = $this->getEmbeddedGroup($attributes);
        $data = $group->all();
{% else %}
        $data = $this->getDataForFind($attributes, $queryParams);
{% endif %}

        $resource = new \{{config_class.classes.resource}}($this->level3);
        $resource->fromDocuments($this, $data);
        $resource->setRepositoryKey($this->getKey());

        return $resource;
    }

    protected function getDataForFind(\Symfony\Component\HttpFoundation\ParameterBag $attributes, \Symfony\Component\HttpFoundation\ParameterBag $queryParams)
    {
        $query = $this->getDocumentRepository()->createQuery();
        $this->applyCriteriaToQuery($query, $queryParams);
        $this->applySortAndLimits($query, $attributes);
        return $query->all();
    }

    protected function applyCriteriaToQuery(\Mongator\Query\Query $query, \Symfony\Component\HttpFoundation\ParameterBag $queryParams)
    {
        foreach ($queryParams->all() as $key => $value) {
            $this->applyMethodToQuery($query, $key, $value);
        }
    }

    protected function applyMethodToQuery(\Mongator\Query\Query $query, $criteria, $value)
    {
        $method = sprintf('find%s', ucfirst($criteria));

        if (!is_callable(array($query, $method))) {
            throw new \Level3\Exceptions\BadRequest(
                sprintf('Invalid criteria "%s"', $criteria)
            );
        }
    
        $query->$method($value);
    }

    protected function applySortAndLimits(\Mongator\Query\Query $query, \Symfony\Component\HttpFoundation\ParameterBag $attributes)
    {
        $sort = $attributes->get('_sort');
        if ($sort) {
            $query->sort($sort);
        }

        $offset = $attributes->get('_offset');
        if ($offset) {
            $query->skip($offset);
        }

        $limit = $attributes->get('_limit');
        if ($limit) {
            $query->limit($limit);
        }
    }

    public function get(\Symfony\Component\HttpFoundation\ParameterBag $attributes)
    {
{% if config_class.isEmbedded %}
        $document = $this->getEmbeddedDocument($attributes);
{% else %}
        $document = $this->getDocument($attributes);
{% endif %}

        return $this->createDocumentResource($document);
    }

    public function post(\Symfony\Component\HttpFoundation\ParameterBag $attributes, \Symfony\Component\HttpFoundation\ParameterBag $data)
    {
        $document = $this->createDocument($attributes);
        $document->fromArray(\{{config_class.classes.resource}}::formatToDocument($data->all()));

{% if config_class.isEmbedded %}
        $rap = $document->getRootAndPath();
        $rap['root']->save();
{% else %}
        $document->save();
{% endif %}

        return $this->createDocumentResource($document);
    }

    public function put(\Symfony\Component\HttpFoundation\ParameterBag $attributes, \Symfony\Component\HttpFoundation\ParameterBag $data)
    {
{% if config_class.isEmbedded %}
        $orignalDocument = $this->getEmbeddedDocument($attributes);
{% else %}
        $orignalDocument = $this->getDocument($attributes);
{% endif %}
        $data->set('id', (string) $orignalDocument->getId());

        $document = $this->createDocument($attributes);
        $document->fromArray(\{{config_class.classes.resource}}::formatToDocument($data->all()));

{% if config_class.isEmbedded %}
        $rap = $document->getRootAndPath();

        $key = explode('/', $this->getKey());
        $removeMethod = sprintf('remove%s', ucfirst(end($key)));
        $addMethod = sprintf('add%s', ucfirst(end($key)));

        $rap['root']->$removeMethod($orignalDocument);
        $rap['root']->$addMethod($document);
        $rap['root']->save();
{% else %}
        $document->setIsNew(false);
        $document->save();
{% endif %}

        return $this->createDocumentResource($document);
    }

    public function patch(\Symfony\Component\HttpFoundation\ParameterBag $attributes, \Symfony\Component\HttpFoundation\ParameterBag $data)
    {
{% if config_class.isEmbedded %}
        $document = $this->getEmbeddedDocument($attributes);
{% else %}
        $document = $this->getDocument($attributes);
{% endif %}
        $data->remove('id');
        
        $document->fromArray(\{{config_class.classes.resource}}::formatToDocument($data->all()));
{% if config_class.isEmbedded %}

        $rap = $document->getRootAndPath();
        $rap['root']->save();
{% else %}
        $document->save();
{% endif %}

        return $this->createDocumentResource($document);
    }

    public function delete(\Symfony\Component\HttpFoundation\ParameterBag $attributes)
    {
{% if config_class.isEmbedded %}
        $embedded = $this->getEmbeddedDocument($attributes);

        $rap = $embedded->getRootAndPath();
        $document = $rap['root'];

        $key = explode('/', $this->getKey());
        $removeMethod = sprintf('remove%s', ucfirst(end($key)));
        $document->$removeMethod($embedded);
        $document->save();
{% else %}
        $document = $this->getDocument($attributes);
        $this->getDocumentRepository()->delete($document);
{% endif %}
    }


    protected function createDocument(\Symfony\Component\HttpFoundation\ParameterBag  $attributes)
    {
{% if config_class.isEmbedded %}
        $document = $this->getDocument($attributes);
        $embedded = $this->mongator->create('{{ class }}');

        $key = explode('/', $this->getKey());
        $addMethod = sprintf('add%s', ucfirst(end($key)));

        $document->$addMethod($embedded);
        return $embedded;
{% else %}
        return $this->getDocumentRepository()->create();
{% endif %}
    }

    protected function getDocument(\Symfony\Component\HttpFoundation\ParameterBag $attributes)
    {
        $key = explode('/', $this->getKey());
{% if config_class.isEmbedded %}
        $id = $this->castStringToMongoId($attributes->get($key[count($key)-2] . 'Id'));
{% else %}
        $id = $this->castStringToMongoId($attributes->get($key[count($key)-1] . 'Id'));
{% endif %}
        $documents = $this->getDocumentRepository()->findById(array($id));
        
        if ($documents) {
            return end($documents);
        } else {
            throw new \Level3\Exceptions\NotFound();
        }
    }

{% if config_class.isEmbedded %}
    protected function getEmbeddedDocument(\Symfony\Component\HttpFoundation\ParameterBag $attributes)
    {
        $key = explode('/', $this->getKey());
        $group = $this->getEmbeddedGroup($attributes);

        if (count($group) != 0) {
            foreach ($group as $embedded) {
                if ((string) $embedded->getId() == $attributes->get(end($key) . 'Id')) {
                    return $embedded;
                }
            }
        } 

        throw new \Level3\Exceptions\NotFound();
    }
{% endif %}

{% if config_class.isEmbedded %}
    protected function getEmbeddedGroup(\Symfony\Component\HttpFoundation\ParameterBag $attributes)
    {
        $document = $this->getDocument($attributes);

        $key = explode('/', $this->getKey());
        $method = sprintf('get%s', ucfirst(end($key)));

        if (!is_callable(array($document,$method))) {
            throw new \Level3\Exceptions\NotFound();
        }

        return $document->$method();
    }
{% endif %}

    public function getDocumentRepository()
    {
{% if config_class.isEmbedded %}
        $key = explode('/', $this->getKey());
        array_pop($key);
        return $this->level3->getHub()->get(implode('/', $key))->getDocumentRepository();
{% else %}
        return $this->mongator->getRepository('{{ class }}');
{% endif %}
    }

    public function getDocumentURI(\{{ class }} $document)
    {
        $key = explode('/', $this->getKey());
{% if config_class.isEmbedded %}
        $rap = $document->getRootAndPath();
{% endif %}

        $attributes = new \Symfony\Component\HttpFoundation\ParameterBag(array(
{% if config_class.isEmbedded %}
            $key[count($key)-2] . 'Id' => (string) $rap['root']->getId(),
{% endif %}
            end($key) . 'Id' => (string) $document->getId()
        ));

        return $this->getURI($attributes);
    }

    public function createDocumentResource(\{{ class }} $document)
    {
        $uri = $this->getDocumentURI($document);

        $resource = new \{{config_class.classes.resource}}($this->level3);
        $resource->setURI($uri);
        $resource->setRepositoryKey($this->getKey());
        $resource->fromDocument($document);

        return $resource;
    }

    protected function castStringToMongoId($id)
    {
        $valid = false;

        try {
            $mongoId = new \MongoId($id);
            if ((string) $mongoId == $id) {
                $valid = true;
            }
        } catch (\MongoException $e) {
            
        }
        
        if (!$valid) {
            throw new \Level3\Exceptions\BadRequest();
        }

        return $mongoId;
    }
